// Code generated by mockery v1.0.0.
// Edited to validate "Schedule" function execution as goroutine.

package mocks

import (
	context "context"
	"sync"
)

import mock "github.com/stretchr/testify/mock"
import sfxclient "github.com/signalfx/golib/sfxclient"
import time "time"

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
	wg sync.WaitGroup
}

// AddCallback provides a mock function with given fields: collector
func (_m *Scheduler) AddCallback(collector sfxclient.Collector) {
	_m.Called(collector)
}

// ReportOnce provides a mock function with given fields: ctx
func (_m *Scheduler) ReportOnce(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportingDelay provides a mock function with given fields: _a0
func (_m *Scheduler) ReportingDelay(_a0 time.Duration) {
	_m.Called(_a0)
}

// Schedule provides a mock function with given fields: ctx
func (_m *Scheduler) Schedule(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	_m.wg.Done()
	return r0
}

func (_m *Scheduler) ExpectScheduleToBeCalled() {
	_m.wg.Add(1)
}

func (_m *Scheduler) WaitForScheduleToBeCalled() {
	_m.wg.Wait()
}